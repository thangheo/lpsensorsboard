ARM GAS  /tmp/cciwAqz5.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l0xx_hal_wwdg.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_WWDG_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_WWDG_MspInit
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	HAL_WWDG_MspInit:
  25              	.LVL0:
  26              	.LFB48:
  27              		.file 1 "Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c"
   1:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
   2:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ******************************************************************************
   3:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @file    stm32l0xx_hal_wwdg.c
   4:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @author  MCD Application Team
   5:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief   WWDG HAL module driver.
   6:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *          functionalities of the Window Watchdog (WWDG) peripheral:
   8:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           + Initialization and Configuration functions
   9:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           + IO operation functions
  10:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   @verbatim
  11:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
  12:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****                       ##### WWDG Specific features #####
  13:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
  14:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   [..]
  15:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     Once enabled the WWDG generates a system reset on expiry of a programmed
  16:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     time period, unless the program refreshes the counter (T[6;0] downcounter)
  17:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     before reaching 0x3F value (i.e. a reset is generated when the counter
  18:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     value rolls down from 0x40 to 0x3F).
  19:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  20:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) An MCU reset is also generated if the counter value is refreshed
  21:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         before the counter has reached the refresh window value. This
  22:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  23:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Once enabled the WWDG cannot be disabled except by a system reset.
  24:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) If required by application, an Early Wakeup Interrupt can be triggered
  25:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         in order to be warned before WWDG expiration. The Early Wakeup Interrupt
  26:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (EWI) can be used if specific safety operations or data logging must
  27:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         be performed before the actual reset is generated. When the downcounter
  28:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         reaches 0x40, interrupt occurs. This mechanism requires WWDG interrupt
  29:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         line to be enabled in NVIC. Once enabled, EWI interrupt cannot be
  30:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         disabled except by a system reset.
  31:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) WWDGRST flag in RCC CSR register can be used to inform when a WWDG
ARM GAS  /tmp/cciwAqz5.s 			page 2


  32:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         reset occurs.
  33:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) The WWDG counter input clock is derived from the APB clock divided
  34:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         by a programmable prescaler.
  35:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) WWDG clock (Hz) = PCLK1 / (4096 * Prescaler)
  36:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) WWDG timeout (mS) = 1000 * (T[5;0] + 1) / WWDG clock (Hz)
  37:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         where T[5;0] are the lowest 6 bits of Counter.
  38:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) WWDG Counter refresh is allowed between the following limits :
  39:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) min time (mS) = 1000 * (Counter - Window) / WWDG clock
  40:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) max time (mS) = 1000 * (Counter - 0x40) / WWDG clock
  41:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Typical values:
  42:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) Counter min (T[5;0] = 0x00) at 32MHz (PCLK1) with zero prescaler:
  43:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****              max timeout before reset: approximately 41.79µs
  44:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) Counter max (T[5;0] = 0x3F) at 32MHz (PCLK1) with prescaler
  45:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****              dividing by 8:
  46:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****              max timeout before reset: approximately 342.38ms
  47:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  48:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****                      ##### How to use this driver #####
  49:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
  50:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  51:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     *** Common driver usage ***
  52:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     ===========================
  53:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  54:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   [..]
  55:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Enable WWDG APB1 clock using __HAL_RCC_WWDG_CLK_ENABLE().
  56:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Configure the WWDG prescaler, refresh window value, counter value and early
  57:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         interrupt status using HAL_WWDG_Init() function. This will automatically
  58:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         enable WWDG and start its downcounter. Time reference can be taken from 
  59:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         function exit. Care must be taken to provide a counter value
  60:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         greater than 0x40 to prevent generation of immediate reset.
  61:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) If the Early Wakeup Interrupt (EWI) feature is enabled, an interrupt is
  62:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         generated when the counter reaches 0x40. When HAL_WWDG_IRQHandler is
  63:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         triggered by the interrupt service routine, flag will be automatically
  64:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         cleared and HAL_WWDG_WakeupCallback user callback will be executed. User
  65:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         can add his own code by customization of callback HAL_WWDG_WakeupCallback.
  66:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Then the application program must refresh the WWDG counter at regular
  67:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         intervals during normal operation to prevent an MCU reset, using
  68:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         HAL_WWDG_Refresh() function. This operation must occur only when
  69:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         the counter is lower than the refresh window value already programmed.
  70:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  71:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     *** Callback registration ***
  72:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     =============================
  73:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  74:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   [..]
  75:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     The compilation define USE_HAL_WWDG_REGISTER_CALLBACKS when set to 1 allows
  76:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     the user to configure dynamically the driver callbacks. Use Functions
  77:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     HAL_WWDG_RegisterCallback() to register a user callback.
  78:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  79:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Function HAL_WWDG_RegisterCallback() allows to register following
  80:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         callbacks:
  81:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) EwiCallback : callback for Early WakeUp Interrupt.
  82:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) MspInitCallback : WWDG MspInit.
  83:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  84:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     and a pointer to the user callback function.
  85:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  86:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Use function HAL_WWDG_UnRegisterCallback() to reset a callback to
  87:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     the default weak (surcharged) function. HAL_WWDG_UnRegisterCallback()
  88:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     takes as parameters the HAL peripheral handle and the Callback ID.
ARM GAS  /tmp/cciwAqz5.s 			page 3


  89:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     This function allows to reset following callbacks:
  90:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) EwiCallback : callback for  Early WakeUp Interrupt.
  91:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         (++) MspInitCallback : WWDG MspInit.
  92:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  93:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     [..]
  94:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     When calling HAL_WWDG_Init function, callbacks are reset to the
  95:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     corresponding legacy weak (surcharged) functions:
  96:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     HAL_WWDG_EarlyWakeupCallback() and HAL_WWDG_MspInit() only if they have
  97:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     not been registered before.
  98:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  99:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     [..]
 100:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     When compilation define USE_HAL_WWDG_REGISTER_CALLBACKS is set to 0 or
 101:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     not defined, the callback registering feature is not available
 102:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     and weak (surcharged) callbacks are used.
 103:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 104:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     *** WWDG HAL driver macros list ***
 105:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     ===================================
 106:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     [..]
 107:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       Below the list of available macros in WWDG HAL driver.
 108:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) __HAL_WWDG_ENABLE: Enable the WWDG peripheral
 109:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) __HAL_WWDG_GET_FLAG: Get the selected WWDG's flag status
 110:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) __HAL_WWDG_CLEAR_FLAG: Clear the WWDG's pending flags
 111:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) __HAL_WWDG_ENABLE_IT: Enable the WWDG early wakeup interrupt
 112:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 113:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   @endverbatim
 114:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ******************************************************************************
 115:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @attention
 116:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *
 117:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 118:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * All rights reserved.</center></h2>
 119:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *
 120:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 121:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * the "License"; You may not use this file except in compliance with the
 122:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * License. You may obtain a copy of the License at:
 123:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                        opensource.org/licenses/BSD-3-Clause
 124:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *
 125:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ******************************************************************************
 126:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 127:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 128:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Includes ------------------------------------------------------------------*/
 129:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #include "stm32l0xx_hal.h"
 130:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 131:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /** @addtogroup STM32L0xx_HAL_Driver
 132:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @{
 133:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 134:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 135:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #ifdef HAL_WWDG_MODULE_ENABLED
 136:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /** @defgroup WWDG WWDG
 137:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief WWDG HAL module driver.
 138:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @{
 139:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 140:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 141:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
 142:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Private define ------------------------------------------------------------*/
 143:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 144:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 145:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/cciwAqz5.s 			page 4


 146:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /* Exported functions --------------------------------------------------------*/
 147:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 148:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions WWDG Exported Functions
 149:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @{
 150:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 151:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 152:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group1 Initialization and Configuration functions
 153:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *  @brief    Initialization and Configuration functions.
 154:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *
 155:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** @verbatim
 156:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
 157:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****           ##### Initialization and Configuration functions #####
 158:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
 159:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   [..]
 160:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     This section provides functions allowing to:
 161:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) Initialize and start the WWDG according to the specified parameters
 162:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****           in the WWDG_InitTypeDef of associated handle.
 163:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       (+) Initialize the WWDG MSP.
 164:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 165:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** @endverbatim
 166:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @{
 167:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 168:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 169:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 170:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Initialize the WWDG according to the specified.
 171:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         parameters in the WWDG_InitTypeDef of  associated handle.
 172:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 173:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 174:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval HAL status
 175:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 176:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 178:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   if (hwwdg == NULL)
 180:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     return HAL_ERROR;
 182:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 183:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 184:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check the parameters */
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 190:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 191:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 192:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Reset Callback pointers */
 193:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   if (hwwdg->EwiCallback == NULL)
 194:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 195:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 196:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 197:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 198:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   if (hwwdg->MspInitCallback == NULL)
 199:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 200:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 201:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 202:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
ARM GAS  /tmp/cciwAqz5.s 			page 5


 203:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Init the low level hardware */
 204:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   hwwdg->MspInitCallback(hwwdg);
 205:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #else
 206:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Init the low level hardware */
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   HAL_WWDG_MspInit(hwwdg);
 208:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 209:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 210:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Set WWDG Counter */
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 212:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 213:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Set WWDG Prescaler and Window */
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window
 215:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 216:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Return function status */
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   return HAL_OK;
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 219:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 220:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 221:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 222:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Initialize the WWDG MSP.
 223:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 224:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 225:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @note   When rewriting this function in user file, mechanism may be added
 226:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         to avoid multiple initialize when HAL_WWDG_Init function is called
 227:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         again to change parameters.
 228:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval None
 229:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 230:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** __weak void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg)
 231:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
  28              		.loc 1 231 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 232:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 233:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   UNUSED(hwwdg);
  33              		.loc 1 233 3 view .LVU1
 234:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 235:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 236:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****            the HAL_WWDG_MspInit could be implemented in the user file
 237:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****    */
 238:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
  34              		.loc 1 238 1 is_stmt 0 view .LVU2
  35              		@ sp needed
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE48:
  40              		.section	.text.HAL_WWDG_Init,"ax",%progbits
  41              		.align	1
  42              		.global	HAL_WWDG_Init
  43              		.syntax unified
  44              		.code	16
  45              		.thumb_func
  47              	HAL_WWDG_Init:
  48              	.LVL1:
  49              	.LFB47:
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
ARM GAS  /tmp/cciwAqz5.s 			page 6


  50              		.loc 1 177 1 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
 177:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check the WWDG handle allocation */
  54              		.loc 1 177 1 is_stmt 0 view .LVU4
  55 0000 10B5     		push	{r4, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 4, -8
  59              		.cfi_offset 14, -4
  60 0002 041E     		subs	r4, r0, #0
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
  61              		.loc 1 179 3 is_stmt 1 view .LVU5
 179:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
  62              		.loc 1 179 6 is_stmt 0 view .LVU6
  63 0004 0FD0     		beq	.L4
 185:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
  64              		.loc 1 185 3 is_stmt 1 view .LVU7
 186:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  65              		.loc 1 186 3 view .LVU8
 187:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  66              		.loc 1 187 3 view .LVU9
 188:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
  67              		.loc 1 188 3 view .LVU10
 189:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  68              		.loc 1 189 3 view .LVU11
 207:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
  69              		.loc 1 207 3 view .LVU12
  70 0006 FFF7FEFF 		bl	HAL_WWDG_MspInit
  71              	.LVL2:
 211:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  72              		.loc 1 211 3 view .LVU13
  73 000a 2268     		ldr	r2, [r4]
  74 000c 8023     		movs	r3, #128
  75 000e E168     		ldr	r1, [r4, #12]
  76 0010 0B43     		orrs	r3, r1
  77 0012 1360     		str	r3, [r2]
 214:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  78              		.loc 1 214 3 view .LVU14
  79 0014 2369     		ldr	r3, [r4, #16]
  80 0016 6268     		ldr	r2, [r4, #4]
  81 0018 1343     		orrs	r3, r2
  82 001a A168     		ldr	r1, [r4, #8]
  83 001c 2268     		ldr	r2, [r4]
  84 001e 0B43     		orrs	r3, r1
  85 0020 5360     		str	r3, [r2, #4]
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
  86              		.loc 1 217 3 view .LVU15
 217:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
  87              		.loc 1 217 10 is_stmt 0 view .LVU16
  88 0022 0020     		movs	r0, #0
  89              	.L3:
 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  90              		.loc 1 218 1 view .LVU17
  91              		@ sp needed
  92              	.LVL3:
ARM GAS  /tmp/cciwAqz5.s 			page 7


 218:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
  93              		.loc 1 218 1 view .LVU18
  94 0024 10BD     		pop	{r4, pc}
  95              	.LVL4:
  96              	.L4:
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
  97              		.loc 1 181 12 view .LVU19
  98 0026 0120     		movs	r0, #1
  99              	.LVL5:
 181:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 100              		.loc 1 181 12 view .LVU20
 101 0028 FCE7     		b	.L3
 102              		.cfi_endproc
 103              	.LFE47:
 105              		.section	.text.HAL_WWDG_Refresh,"ax",%progbits
 106              		.align	1
 107              		.global	HAL_WWDG_Refresh
 108              		.syntax unified
 109              		.code	16
 110              		.thumb_func
 112              	HAL_WWDG_Refresh:
 113              	.LVL6:
 114              	.LFB49:
 239:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 240:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 241:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 242:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 243:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Register a User WWDG Callback
 244:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         To be used instead of the weak (surcharged) predefined callback
 245:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg WWDG handle
 246:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  CallbackID ID of the callback to be registered
 247:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         This parameter can be one of the following values:
 248:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_EWI_CB_ID Early WakeUp Interrupt Callback ID
 249:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_MSPINIT_CB_ID MspInit callback ID
 250:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  pCallback pointer to the Callback function
 251:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval status
 252:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 253:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_RegisterCallback(WWDG_HandleTypeDef *hwwdg, HAL_WWDG_CallbackIDTypeDef C
 254:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****                                             pWWDG_CallbackTypeDef pCallback)
 255:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 256:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   HAL_StatusTypeDef status = HAL_OK;
 257:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 258:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   if (pCallback == NULL)
 259:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 260:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     status = HAL_ERROR;
 261:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 262:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   else
 263:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 264:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     switch (CallbackID)
 265:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     {
 266:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       case HAL_WWDG_EWI_CB_ID:
 267:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         hwwdg->EwiCallback = pCallback;
 268:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         break;
 269:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 270:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       case HAL_WWDG_MSPINIT_CB_ID:
 271:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         hwwdg->MspInitCallback = pCallback;
 272:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         break;
ARM GAS  /tmp/cciwAqz5.s 			page 8


 273:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 274:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       default:
 275:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         status = HAL_ERROR;
 276:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****         break;
 277:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     }
 278:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 279:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 280:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   return status;
 281:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 282:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 283:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 284:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 285:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Unregister a WWDG Callback
 286:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         WWDG Callback is redirected to the weak (surcharged) predefined callback
 287:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg WWDG handle
 288:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  CallbackID ID of the callback to be registered
 289:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         This parameter can be one of the following values:
 290:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_EWI_CB_ID Early WakeUp Interrupt Callback ID
 291:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *           @arg @ref HAL_WWDG_MSPINIT_CB_ID MspInit callback ID
 292:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval status
 293:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 294:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_UnRegisterCallback(WWDG_HandleTypeDef *hwwdg, HAL_WWDG_CallbackIDTypeDef
 295:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 296:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   HAL_StatusTypeDef status = HAL_OK;
 297:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 298:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   switch (CallbackID)
 299:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 300:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     case HAL_WWDG_EWI_CB_ID:
 301:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       hwwdg->EwiCallback = HAL_WWDG_EarlyWakeupCallback;
 302:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       break;
 303:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 304:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     case HAL_WWDG_MSPINIT_CB_ID:
 305:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       hwwdg->MspInitCallback = HAL_WWDG_MspInit;
 306:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       break;
 307:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 308:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     default:
 309:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       status = HAL_ERROR;
 310:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       break;
 311:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 312:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 313:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   return status;
 314:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 315:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 316:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 317:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 318:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @}
 319:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 320:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 321:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /** @defgroup WWDG_Exported_Functions_Group2 IO operation functions
 322:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *  @brief    IO operation functions
 323:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *
 324:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** @verbatim
 325:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
 326:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****                       ##### IO operation functions #####
 327:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   ==============================================================================
 328:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   [..]
 329:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     This section provides functions allowing to:
ARM GAS  /tmp/cciwAqz5.s 			page 9


 330:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Refresh the WWDG.
 331:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     (+) Handle WWDG interrupt request and associated function callback.
 332:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 333:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** @endverbatim
 334:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @{
 335:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 336:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 337:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 338:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Refresh the WWDG.
 339:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 340:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 341:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval HAL status
 342:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 343:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
 344:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 115              		.loc 1 344 1 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 345:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Write to WWDG CR the WWDG Counter value to refresh with */
 346:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 120              		.loc 1 346 3 view .LVU22
 121 0000 0368     		ldr	r3, [r0]
 122 0002 C268     		ldr	r2, [r0, #12]
 123 0004 1A60     		str	r2, [r3]
 347:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 348:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Return function status */
 349:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   return HAL_OK;
 124              		.loc 1 349 3 view .LVU23
 350:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 125              		.loc 1 350 1 is_stmt 0 view .LVU24
 126 0006 0020     		movs	r0, #0
 127              	.LVL7:
 128              		.loc 1 350 1 view .LVU25
 129              		@ sp needed
 130 0008 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE49:
 134              		.section	.text.HAL_WWDG_EarlyWakeupCallback,"ax",%progbits
 135              		.align	1
 136              		.weak	HAL_WWDG_EarlyWakeupCallback
 137              		.syntax unified
 138              		.code	16
 139              		.thumb_func
 141              	HAL_WWDG_EarlyWakeupCallback:
 142              	.LVL8:
 143              	.LFB51:
 351:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 352:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 353:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  Handle WWDG interrupt request.
 354:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @note   The Early Wakeup Interrupt (EWI) can be used if specific safety operations
 355:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         or data logging must be performed before the actual reset is generated.
 356:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         The EWI interrupt is enabled by calling HAL_WWDG_Init function with
 357:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         EWIMode set to WWDG_EWI_ENABLE.
 358:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         When the downcounter reaches the value 0x40, and EWI interrupt is
 359:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         generated and the corresponding Interrupt Service Routine (ISR) can
ARM GAS  /tmp/cciwAqz5.s 			page 10


 360:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         be used to trigger specific actions (such as communications or data
 361:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *         logging), before resetting the device.
 362:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 363:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 364:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval None
 365:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 366:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 368:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 370:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 371:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     /* Check if WWDG Early Wakeup Interrupt occurred */
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 373:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     {
 374:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       /* Clear the WWDG Early Wakeup flag */
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 376:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 377:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
 378:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       /* Early Wakeup registered callback */
 379:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       hwwdg->EwiCallback(hwwdg);
 380:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #else
 381:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       /* Early Wakeup callback */
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****       HAL_WWDG_EarlyWakeupCallback(hwwdg);
 383:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 384:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     }
 385:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   }
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 387:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 388:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 389:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** /**
 390:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @brief  WWDG Early Wakeup callback.
 391:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
 392:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   *                the configuration information for the specified WWDG module.
 393:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   * @retval None
 394:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   */
 395:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** __weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
 396:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** {
 144              		.loc 1 396 1 is_stmt 1 view -0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 397:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Prevent unused argument(s) compilation warning */
 398:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   UNUSED(hwwdg);
 149              		.loc 1 398 3 view .LVU27
 399:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 400:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 401:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****            the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
 402:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****    */
 403:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** }
 150              		.loc 1 403 1 is_stmt 0 view .LVU28
 151              		@ sp needed
 152 0000 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE51:
 156              		.section	.text.HAL_WWDG_IRQHandler,"ax",%progbits
 157              		.align	1
ARM GAS  /tmp/cciwAqz5.s 			page 11


 158              		.global	HAL_WWDG_IRQHandler
 159              		.syntax unified
 160              		.code	16
 161              		.thumb_func
 163              	HAL_WWDG_IRQHandler:
 164              	.LVL9:
 165              	.LFB50:
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 166              		.loc 1 367 1 is_stmt 1 view -0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 367:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   /* Check if Early Wakeup Interrupt is enable */
 170              		.loc 1 367 1 is_stmt 0 view .LVU30
 171 0000 10B5     		push	{r4, lr}
 172              	.LCFI1:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 176              		.loc 1 369 3 is_stmt 1 view .LVU31
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 177              		.loc 1 369 7 is_stmt 0 view .LVU32
 178 0002 0368     		ldr	r3, [r0]
 179 0004 5A68     		ldr	r2, [r3, #4]
 369:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****   {
 180              		.loc 1 369 6 view .LVU33
 181 0006 9205     		lsls	r2, r2, #22
 182 0008 02D5     		bpl	.L7
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     {
 183              		.loc 1 372 5 is_stmt 1 view .LVU34
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     {
 184              		.loc 1 372 9 is_stmt 0 view .LVU35
 185 000a 9A68     		ldr	r2, [r3, #8]
 372:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c ****     {
 186              		.loc 1 372 8 view .LVU36
 187 000c D207     		lsls	r2, r2, #31
 188 000e 00D4     		bmi	.L9
 189              	.LVL10:
 190              	.L7:
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 191              		.loc 1 386 1 view .LVU37
 192              		@ sp needed
 193 0010 10BD     		pop	{r4, pc}
 194              	.LVL11:
 195              	.L9:
 375:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 196              		.loc 1 375 7 is_stmt 1 view .LVU38
 197 0012 0222     		movs	r2, #2
 198 0014 5242     		rsbs	r2, r2, #0
 199 0016 9A60     		str	r2, [r3, #8]
 382:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** #endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
 200              		.loc 1 382 7 view .LVU39
 201 0018 FFF7FEFF 		bl	HAL_WWDG_EarlyWakeupCallback
 202              	.LVL12:
 386:Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_wwdg.c **** 
 203              		.loc 1 386 1 is_stmt 0 view .LVU40
ARM GAS  /tmp/cciwAqz5.s 			page 12


 204 001c F8E7     		b	.L7
 205              		.cfi_endproc
 206              	.LFE50:
 208              		.text
 209              	.Letext0:
 210              		.file 2 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 211              		.file 3 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 212              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l051xx.h"
 213              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 214              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 215              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_wwdg.h"
ARM GAS  /tmp/cciwAqz5.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_hal_wwdg.c
     /tmp/cciwAqz5.s:18     .text.HAL_WWDG_MspInit:0000000000000000 $t
     /tmp/cciwAqz5.s:24     .text.HAL_WWDG_MspInit:0000000000000000 HAL_WWDG_MspInit
     /tmp/cciwAqz5.s:41     .text.HAL_WWDG_Init:0000000000000000 $t
     /tmp/cciwAqz5.s:47     .text.HAL_WWDG_Init:0000000000000000 HAL_WWDG_Init
     /tmp/cciwAqz5.s:106    .text.HAL_WWDG_Refresh:0000000000000000 $t
     /tmp/cciwAqz5.s:112    .text.HAL_WWDG_Refresh:0000000000000000 HAL_WWDG_Refresh
     /tmp/cciwAqz5.s:135    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 $t
     /tmp/cciwAqz5.s:141    .text.HAL_WWDG_EarlyWakeupCallback:0000000000000000 HAL_WWDG_EarlyWakeupCallback
     /tmp/cciwAqz5.s:157    .text.HAL_WWDG_IRQHandler:0000000000000000 $t
     /tmp/cciwAqz5.s:163    .text.HAL_WWDG_IRQHandler:0000000000000000 HAL_WWDG_IRQHandler

NO UNDEFINED SYMBOLS
